/*
 * event.h - The game event system.
 *	Events are generated by gameplay happenings, such as the level loading,
 *	player dying, a door opening, a sound being made, a grenade exploding,
 *	etc. Basically, anything that happens that an Entity might want to
 *	know about, comes through here.
 *
 *	Only entities can listen for and respond to events. This happens in
 *	one of three ways, there being three distinct types of event:
 *		1) Broadcast events - infrequent, but sent to ALL entities.
 *		2) Targeted events - sent to only specific classes of entity.
 *		3) AoE events - the most common, sent to all entities in an area.
 *
 *	Events are placed into a queue when they enter this system. Either they
 *	are going to be queued up and handled next frame, or they are time-
 *	stamped to be handled in a future frame.
 *
 *	Events are differentiated by strings, and the general naming
 *	convention is all-lowercase-with-hyphens. For e.g.: "door-slammed",
 *	"player-death", etc.
 *	TODO: Strings + hash for quick comparisons
 *
 *
 */
#pragma once

/* event_t flags, separated by mutual exclusion. */
#define EVENT_BROADCAST	(1 << 0)
#define EVENT_TARGETED	(1 << 1)
#define EVENT_AREA	(1 << 2)

#define EVENT_QUEUED	(1 << 3)
#define EVENT_FUTURE	(1 << 4)

typedef struct event {
	const char *name;
	uint32_t flags;
} event_t;

/* Called during startup and shutdown. */
ecode_t init_events();
ecode_t shutdown_events();

/* Allocate a new event ready to be sent off. */
event_t *create_event(const char *name, uint32_t flags);

/* Queue the given event up ready for processing. */
ecode_t queue_event(event_t *event);

/* Process all events currently queued. */
ecode_t process_events();
